{"version":3,"sources":["webpack:///./src/components/HeroSection/style.js","webpack:///./src/components/HeroSection/index.js","webpack:///./src/pages/index.js"],"names":["makeStyles","theme","wrapper","display","placeItems","width","height","backgroundColor","palette","common","offWhite","marginBottom","spacing","header","placeSelf","title","color","primary","main","fontWeight","letterSpacing","gridArea","zIndex","Image","classes","useStyles","data","className","Typography","variant","component","align","site","siteMetadata","description","image","fixed","placeholderImage","childImageSharp","hero","position","clientsWrapper","gap","clients","placeContent","query","IndexPage","props","Layout","id","nodes","map","node","href","website","client","key","name","toLowerCase","alt"],"mappings":"ixEACeA,eAAW,SAACC,GAAD,MAAY,CACpCC,QAAS,CACPC,QAAS,OACTC,WAAY,kBACZC,MAAO,OACPC,OAAQ,OACRC,gBAAiBN,EAAMO,QAAQC,OAAOC,SACtCC,aAAcV,EAAMW,QAAQ,IAE9BC,OAAQ,CACNC,UAAW,cAEbC,MAAO,CACLC,MAAOf,EAAMO,QAAQS,QAAQC,KAC7BC,WAAY,OACZC,cAAe,MACfC,SAAU,UACVC,OAAQ,QCkCGC,EA7CD,WACZ,IAAMC,EAAUC,IACVC,EAAI,OAoBV,OACE,mBAAKC,UAAWH,EAAQtB,SACtB,sBAAQyB,UAAWH,EAAQX,QACzB,YAACe,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,KACVH,UAAWH,EAAQT,MACnBgB,MAAM,UAELL,EAAKM,KAAKC,aAAalB,OAE1B,YAACa,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWH,EAAQU,YAAaH,MAAM,UAC5DL,EAAKM,KAAKC,aAAaC,cAG5B,YAAC,IAAD,CACEP,UAAWH,EAAQW,MACnBC,MAAOV,EAAKW,iBAAiBC,gBAAgBF,U,sCClCrD,IAAMX,EAAYzB,aAAW,SAACC,GAAD,MAAY,CACvCsC,KAAM,CACJC,SAAU,YAEZC,eAAgB,CACdtC,QAAS,OACTuC,IAAKzC,EAAMW,QAAQ,GAAK,MAE1B+B,QAAS,CACPxC,QAAS,OACTyC,aAAc,iBAEhB1C,QAAS,CACPS,aAAcV,EAAMW,QAAQ,QAgEnBiC,EAAK,YA2BHC,UAvFG,SAACC,GACjB,IAAMvB,EAAUC,IAEhB,OACE,YAACuB,EAAA,EAAD,KACE,YAAC,IAAD,CAAKjC,MAAM,SACX,mBAAKY,UAAWH,EAAQtB,SACtB,uBAAS+C,GAAG,OAAOtB,UAAWH,EAAQe,MACpC,YAAC,EAAD,OAEF,uBAASZ,UAAWH,EAAQiB,gBAC1B,YAACb,EAAA,EAAD,CAAYC,QAAQ,KAAKE,MAAM,UAA/B,WAGA,mBAAKJ,UAAWH,EAAQmB,QAASM,GAAG,WACjCF,EAAMrB,KAAKiB,QAAQO,MAAMC,KAAI,SAACC,GAAD,OAC5B,YAAC,IAAD,CACEC,KAAMD,EAAKE,QACX3B,UAAWH,EAAQ+B,OACnBC,IAAKJ,EAAKH,IAEV,YAAC,IAAD,CACEtB,UAAWH,EAAQW,MACnBC,MACEW,EAAMrB,KAAK0B,EAAKK,KAAKC,eAAepB,gBAAgBF,MAGtDuB,IAAKZ,EAAMrB,KAAK0B,EAAKK,KAAKC,eAAeD","file":"component---src-pages-index-js-e43f3a3fcaacfad97581.js","sourcesContent":["import { makeStyles } from '@material-ui/core'\nexport default makeStyles((theme) => ({\n  wrapper: {\n    display: 'grid',\n    placeItems: 'baseline center',\n    width: '100%',\n    height: '80vh',\n    backgroundColor: theme.palette.common.offWhite,\n    marginBottom: theme.spacing(6),\n  },\n  header: {\n    placeSelf: 'end center',\n  },\n  title: {\n    color: theme.palette.primary.main,\n    fontWeight: 'bold',\n    letterSpacing: '1px',\n    gridArea: '1/1/2/2',\n    zIndex: 10,\n  },\n}))\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { Typography } from '@material-ui/core'\n\nimport useStyles from './style'\n\nconst Image = () => {\n  const classes = useStyles()\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(\n        relativePath: { eq: \"logos/CertGround-Monogram-Blue.png\" }\n      ) {\n        childImageSharp {\n          fixed(width: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          title\n          description\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={classes.wrapper}>\n      <header className={classes.header}>\n        <Typography\n          variant=\"h3\"\n          component=\"h1\"\n          className={classes.title}\n          align=\"center\"\n        >\n          {data.site.siteMetadata.title}\n        </Typography>\n        <Typography variant=\"h5\" className={classes.description} align=\"center\">\n          {data.site.siteMetadata.description}\n        </Typography>\n      </header>\n      <Img\n        className={classes.image}\n        fixed={data.placeholderImage.childImageSharp.fixed}\n      />\n    </div>\n  )\n}\n\nexport default Image\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport PropTypes from 'prop-types'\n// import React from 'react'\nimport { makeStyles, Typography, Link as MuiLink } from '@material-ui/core'\n// import Link from '../components/link'\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport HeroImage from '../components/HeroSection'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst useStyles = makeStyles((theme) => ({\n  hero: {\n    position: 'relative',\n  },\n  clientsWrapper: {\n    display: 'grid',\n    gap: theme.spacing(3) + 'px',\n  },\n  clients: {\n    display: 'grid',\n    placeContent: 'center center',\n  },\n  wrapper: {\n    marginBottom: theme.spacing(6),\n  },\n}))\n\nconst IndexPage = (props) => {\n  const classes = useStyles()\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className={classes.wrapper}>\n        <section id=\"hero\" className={classes.hero}>\n          <HeroImage />\n        </section>\n        <section className={classes.clientsWrapper}>\n          <Typography variant=\"h3\" align=\"center\">\n            Clients\n          </Typography>\n          <div className={classes.clients} id=\"clients\">\n            {props.data.clients.nodes.map((node) => (\n              <MuiLink\n                href={node.website}\n                className={classes.client}\n                key={node.id}\n              >\n                <Img\n                  className={classes.image}\n                  fixed={\n                    props.data[node.name.toLowerCase()].childImageSharp.fixed\n                  }\n                  // fixed={data.placeholderImage.childImageSharp.fixed}\n                  alt={props.data[node.name.toLowerCase()].name}\n                />\n                {/* <Typography variant=\"h6\" noWrap>\n              {siteTitle}\n            </Typography> */}\n              </MuiLink>\n            ))}\n          </div>\n        </section>\n      </div>\n    </Layout>\n  )\n  // return (\n  //   <section id=\"hero\" className={classes.hero}>\n  //     {props.data.site.siteMetadata.title}\n  //   </section>\n  // )\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    clients: PropTypes.shape({\n      nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n          website: PropTypes.string,\n          client: PropTypes.string,\n          id: PropTypes.string,\n        })\n      ),\n    }),\n  }).isRequired,\n}\n\nexport const query = graphql`\n  query HomePage {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    clients: allClientsYaml(filter: { name: { ne: \"DEMO\" } }) {\n      nodes {\n        name\n        appUrl\n        website\n        logo\n      }\n    }\n    ibew120: file(relativePath: { eq: \"logos/ibew120.png\" }) {\n      name\n      id\n      childImageSharp {\n        fixed(width: 200) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n"],"sourceRoot":""}